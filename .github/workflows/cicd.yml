name: CICD
on: [workflow_dispatch]
env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  build-and-push:
    runs-on: ubuntu-20.04

    steps:
      - name: Clone test-app repo
        uses: actions/checkout@v3 

      - run: |
          sudo apt update -y
          sudo mkdir /home/runner/app_content
          sudo chmod 755 /home/runner/app_content
          echo ''
          sudo cp ./Dockerfile /home/runner/app_content/Dockerfile
          sudo ls /home/runner/app_content/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: vitr/actions-build-and-upload-to-ecs@master      
        with:
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          repo: main-applications-registry
          region: us-east-1
          tags: latest,${{ github.sha }}
          create_repo: true
      - run: |
          ls /home/runner/
          echo 'Hey'
          sudo docker images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pull-and-deploy-test-of-image:
    needs: build-and-push
    runs-on: ubuntu-20.04  
    steps:
      - name: Clone test-app repo
        uses: actions/checkout@v3   

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - run: |
          sudo apt update -y
          sudo apt install ansible -y
          sudo apt install tree wget -y
          sudo echo "$PEM_CANDIDATE_PRIVATE_KEY" >> candidate.pem
          sudo chmod 400 candidate.pem
          echo 'Otro echo'
          sudo cat candidate.pem
          echo 'Shown key'
          ssh -i "candidate.pem" ubuntu@34.201.132.143 'touch $HOME/text.txt; echo ${{ secrets.AWS_ACCOUNT_ID }} > $HOME/text.txt'
          sudo tree /home/runner/DevOps-Interview-AC/          
          ansible-playbook /home/runner/work/DevOps-Interview-AC/DevOps-Interview-AC/Infrastructure/conf_mgmt_ansible/playbooks/02-image-pull-and-deploy.yml
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 729158664723.dkr.ecr.us-east-1.amazonaws.com
          sudo docker run -d -p 80:80 --name main-applications-registry 729158664723.dkr.ecr.us-east-1.amazonaws.com/main-applications-registry
          sudo docker ps
          wget localhost:80
          sudo cat index.html
          echo 'Done. Deployed'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PEM_CANDIDATE_PRIVATE_KEY: ${{ secrets.PEM_CANDIDATE_KEY }}

          
  
  # deploy-infrastructure-with-terraform:
  #   needs: pull-and-deploy-test-of-image
  #   runs-on: ubuntu-20.04
  #   name: Deploy Webserver
  #   steps:

  #   - name: Checkout Repo
  #     uses: actions/checkout@v3

  #   - name: Terraform Init
  #     uses: hashicorp/terraform-github-actions/init@v0.4.0
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       TF_ACTION_WORKING_DIR: '/home/runner/work/DevOps-Interview-AC/DevOps-Interview-AC/Infrastructure/conf_terraform/.'
  #       AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #   - name: Terraform Validate
  #     uses: hashicorp/terraform-github-actions/validate@v0.3.7

  #   - name: Terraform Apply
  #     uses: hashicorp/terraform-github-actions/apply@v0.4.0
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       TF_ACTION_WORKING_DIR: '/home/runner/work/DevOps-Interview-AC/DevOps-Interview-AC/Infrastructure/conf_terraform/.'
  #       AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #   - name: Sync S3
  #     uses: jakejarvis/s3-sync-action@master
  #     env:
  #       SOURCE_DIR: './src'
  #       AWS_REGION: 'us-east-1'
  #       AWS_S3_BUCKET: '[BUCKET_NAME_HERE]'
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      # - uses: hashicorp/setup-terraform@v2
      #   with:
      #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      #     terraform_wrapper: true
      
          
          
          # - run: terraform init
    
          # - id: plan
          #   run: terraform plan -no-color
    
          # - run: echo ${{ steps.plan.outputs.stdout }}
          # - run: echo ${{ steps.plan.outputs.stderr }}
          # - run: echo ${{ steps.plan.outputs.exitcode }}
    
  # ssh export asdasda ec2
  # ssh user1@server1 'command2'
  # ssh -i "candidate.pem" ubuntu@34.201.132.143 'export TEST=$(echo ${{ secrets.AWS_ACCOUNT_ID }})  | echo "Im Here"'
  #ssh -i "candidate.pem" ubuntu@34.201.132.143 'touch $HOME/text.txt; echo ${{ secrets.AWS_ACCOUNT_ID }} > $HOME/text.txt'
  


  # export AWS_ACCOUNT_ID=$(aws secretsmanager get-secret-value --secret-id app/AWS_ACCOUNT_ID | jq -r .SecretString)
  # sudo ls /home/runner/work/DevOps-Interview-AC/DevOps-Interview-AC/Infrastructure/conf_mgmt_ansible/playbooks
  # aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  # sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-applications-registry:latest
  # sudo docker images
  # sudo docker run --name main-applications-registry -p 80:80 -d ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-applications-registry
  
  # sudo docker run -d -p 80:80 --name main-applications-registry ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-applications-registry
  # curl localhost:80
  
  # terraform -chdir=./Infrastructure/conf_terraform plan
  # terraform apply -auto-approve


      


  # ssh COMANDO (docker build ${{ secrets.GITHUB_TOKEN }} )   a maquina ec2
        
