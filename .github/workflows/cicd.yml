name: CICD
on: [workflow_dispatch]
env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  # build-and-push:
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - name: Clone test-app repo
  #       uses: actions/checkout@v3 

  #     - run: |
  #         sudo apt update -y
  #         sudo mkdir /home/runner/app_content
  #         sudo chmod 755 /home/runner/app_content
  #         echo ''
  #         sudo cp ./Dockerfile /home/runner/app_content/Dockerfile
  #         sudo ls /home/runner/app_content/
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - uses: vitr/actions-build-and-upload-to-ecs@master      
  #       with:
  #         access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         account_id: ${{ secrets.AWS_ACCOUNT_ID }}
  #         repo: main-applications-registry
  #         region: us-east-1
  #         tags: latest,${{ github.sha }}
  #         create_repo: true
  #     - run: |
  #         ls /home/runner/
  #         echo 'Hey'
  #         sudo docker images
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # pull-and-run-test-for-image:
  #   needs: build-and-push
  #   runs-on: ubuntu-20.04  
  #   steps:
  #     - name: Clone test-app repo
  #       uses: actions/checkout@v3   

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
        
  #     - run: |
  #         sudo apt update -y
  #         sudo apt install ansible -y
  #         sudo apt install tree wget -y
  #         sudo tree /home/runner/DevOps-Interview-AC/          
  #         ansible-playbook /home/runner/work/DevOps-Interview-AC/DevOps-Interview-AC/Infrastructure/conf_mgmt_ansible/playbooks/02-image-pull-and-deploy.yml
  #         AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 729158664723.dkr.ecr.us-east-1.amazonaws.com
  #         sudo docker run -d -p 80:80 --name main-applications-registry 729158664723.dkr.ecr.us-east-1.amazonaws.com/main-applications-registry
  #         sudo docker ps
  #         wget localhost:80
  #         sudo cat index.html
  #         echo 'Done. Deployed'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  terraform-plan:
    name: Terrafrom plan of infrastructure
    # needs: pull-and-run-test-for-image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: '${{ env.tf_actions_working_dir }}'

    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3

    - uses: hashicorp/setup-terraform@v2
      
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check; sudo ls -la /home/runner/work/DevOps-Interview-AC/DevOps-Interview-AC/Infrastructure/conf_terraform
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Terraform Init
      id: init
      run: terraform init -input=false; sudo ls -la /home/runner/work/DevOps-Interview-AC/DevOps-Interview-AC/Infrastructure/conf_terraform;pwd
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color; sudo ls -la /home/runner/work/DevOps-Interview-AC/DevOps-Interview-AC/Infrastructure/conf_terraform
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        continue-on-error: false
    
    - name: tree
      run: sudo apt update -y; sudo apt install tree -y; sudo tree /
    - name: Sync S3
      uses: jakejarvis/s3-sync-action@master
      env:
        AWS_REGION: 'us-east-1'
        AWS_S3_BUCKET: 'terraform-resources-test'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        
        
        
        
        # sh ips.sh demo-asg-instance-1 | jq '.[]' > uno.json
        # jq '.[] | .public_ip' uno.json > dos.json
        # sed -i 's\"\\g' dos.json

# ------ TERRAFORM APPLY
# deploy-infrastructure-with-terraform:
#   needs: terraform-plan
#   runs-on: ubuntu-20.04
#   name: Deploy Webserver
  #   steps:
    
    #   - name: Checkout Repo
    #     uses: actions/checkout@v3
    
    
    # deploy-webserver-container:
    #   needs: deploy-infrastructure-with-terraform
    #   runs-on: ubuntu-20.04  
    #   steps:
  
    #     - name: Clone test-app repo
    #       uses: actions/checkout@v3   
  
    #     - run: |
    #         sudo echo ${{ secrets.PEM_CANDIDATE_KEY }} > temporalFile.pem
    #         sudo sed 's/REPLACE/\n/g' temporalFile.pem > /home/runner/candidate.pem
    #         sudo chmod 400 /home/runner/candidate.pem
    #         aws --version
    #         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
    #         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #         aws configure set default.region us-east-1
    #         export AWS_PAGER=""
    #         sudo echo 'output = json' >> ~/.aws/config
    #         # cat ~/.aws/config
    #         echo 'Authenticating...'
    #         aws sts get-caller-identity  > /dev/null 2>&1
    #         echo 'Deploying containers...'
    #         chmod 777 /home/runner/work/DevOps-Interview-AC/DevOps-Interview-AC/Infrastructure/scripts/getAsgMachinesIps.sh
    #         # aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names demo-asg-instance-1 --region ${{ vars.AWS_REGION }} --query AutoScalingGroups[].Instances[].InstanceId --output text
    #         # ls -la $PWD
    #         # echo 'Aqui'
    #         /usr/bin/bash /home/runner/work/DevOps-Interview-AC/DevOps-Interview-AC/Infrastructure/scripts/getAsgMachinesIps.sh demo-asg-instance-1 ${{ vars.AWS_REGION }} ${{ secrets.AWS_ACCESS_KEY_ID }} ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #         echo 'Infrastructure Completely deployed'
  
    #       env:
    #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # ssh export asdasda ec2
  # ssh user1@server1 'command2'
  # ssh -i "candidate.pem" ubuntu@44.203.143.235 'export TEST=$(echo ${{ secrets.AWS_ACCOUNT_ID }})  | echo "Im Here"'
  #ssh -i "candidate.pem" ubuntu@44.203.143.235 'touch $HOME/text.txt; echo ${{ secrets.AWS_ACCOUNT_ID }} > $HOME/text.txt'
  


  # export AWS_ACCOUNT_ID=$(aws secretsmanager get-secret-value --secret-id app/AWS_ACCOUNT_ID | jq -r .SecretString)
  # sudo ls /home/runner/work/DevOps-Interview-AC/DevOps-Interview-AC/Infrastructure/conf_mgmt_ansible/playbooks
  # aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  # sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-applications-registry:latest
  # sudo docker images
  # sudo docker run --name main-applications-registry -p 80:80 -d ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-applications-registry
  
  # sudo docker run -d -p 80:80 --name main-applications-registry ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-applications-registry
  # curl localhost:80
  
  # terraform -chdir=./Infrastructure/conf_terraform plan
  # terraform -chdir=./Infrastructure/conf_terraform destroy -auto-approve
  # terraform apply -auto-approve

  # git add .; git commit -m "Automatize terraform deploy with containers"; git push origin main
  # terraform -chdir=./Infrastructure/conf_terraform apply -auto-approve
      


  # ssh COMANDO (docker build ${{ secrets.GITHUB_TOKEN }} )   a maquina ec2
        
